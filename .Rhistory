pivot_wider(names_from = c(norm, description), values_from = values) %>%
bind_rows(df) %>%
arrange()
} else {
print(paste("Temperaturmessung", datetime, "bereits eingetragen"))
}
}
df
df
df
arrange(df, datetime)
rm(list=ls(all = TRUE))
cat("\014")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(xml2)
library(openxlsx)
df <- readWorkbook("LPG_Temperatur_DB.xlsx", 1) %>%
mutate(datetime = convertToDateTime(datetime))
dir_path <- choose.dir(
#"T:/Leuchten",
"H:/Projekte/Python/METER",
caption = "Ordner mit *.lpm Dateien auswählen."
)
files_path <- list.files(
path = dir_path,
pattern = ".lpm$",
full.names = TRUE,
recursive = TRUE
)
for (file in files_path) {
doc <- readr::read_file(file) %>%
read_xml()
# Eindeutige Datumszeit aus der kalten Raumtemperaturmessung beziehen
datetime <- xml_find_all(doc, ".//Raumtemperatur_kalt") %>%
xml_attr("Time") %>%
lubridate::dmy_hms(tz = "CET")
if (!max(datetime == df$datetime)) {
# Leuchtendaten extrahieren
df_luminaire <- xml_find_all(doc, ".//Leuchtendaten") %>%
xml_attrs() %>%
data.frame() %>%
t() %>%
data.frame() %>%
remove_rownames()
# Leuchtenfamilie extrahieren
product_family <- xml_find_all(doc, ".//Allgemein") %>%
xml_attr("Produktserie")
# Textblöcke Schutartprüfung, Bemerkungen, Verteiler extrahieren
notes_nodes <- xml_find_all(doc, ".//Weitere_Daten")
note_schutzart <- xml_attr(notes_nodes, "Schutzartpruefung") %>%
gsub("/;/", "\n", .)
note_bemerkung <- xml_attr(notes_nodes, "Bemerkungen") %>%
gsub("/;/", "\n", .)
note_verteiler <- xml_attr(notes_nodes, "Verteiler") %>%
gsub("/;/", "\n", .)
# Namespace der einzelnen Prüfschritte extrahieren
norm_desc <- xml_find_all(doc, ".//Pruefschritte") %>%
xml_children() %>%
xml_name()
# Mit den einzelnen Prüfschritte die einzelnen Messergebnisse extrahieren
df_lpm <- data.frame(description = character())
for (desc in norm_desc) {
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_lpm <- data.frame(description, values) %>%
mutate(norm = str_replace(desc, "Norm", "U")) %>%
bind_rows(df_lpm, .)
}
# additional columns
df_lpm <- df_lpm %>%
mutate(
datetime = datetime,
family = product_family,
luminaire = df_luminaire$Leuchtenart,
mounting = df_luminaire$Montageart,
SK = df_luminaire$Schutzklasse,
IP = df_luminaire$IP.Schutzart,
notes1 = note_schutzart,
notes2 = note_bemerkung,
notes3 = note_verteiler
)
# renaming thermo elements
thermoelement <- xml_find_all(doc, ".//Thermoelemente") %>%
xml_children()
thermo_name <- xml_name(thermoelement)
code <- xml_attr(thermoelement, "Code") %>%
gsub(" ", "_", .) # Ersetzt Leerzeichen
for (i in seq(length(thermo_name))) {
df_lpm <- df_lpm %>%
mutate(description = str_replace(
description,
thermo_name[i],
paste0("T_", code[i])
)
)
}
# reshape from long to wide
df <- df_lpm %>%
pivot_wider(names_from = c(norm, description), values_from = values) %>%
bind_rows(df) %>%
arrange(desc(datetime))
} else {
print(paste("Temperaturmessung", datetime, "bereits eingetragen"))
}
}
df
wb <- createWorkbook()
sheet_name <- "LPG_DB"
addWorksheet(wb, sheet_name)
writeDataTable(wb, sheet_name, df, tableStyle = "TableStyleMedium9")
baseStyle <- createStyle(valign = "top")
addStyle(
wb,
sheet_name,
baseStyle,
rows = 1:nrow(df) + 1,
cols = 1:ncol(df),
gridExpand = TRUE
)
wrapStyle <- createStyle(wrapText = TRUE, valign = "top")
notes_colidx <- grep("notes", colnames(df))
addStyle(
wb,
sheet_name,
wrapStyle,
rows = 1:nrow(df) + 1,
cols = notes_colidx,
gridExpand = TRUE
)
dateStyle <- createStyle(numFmt = "dd.mm.yyyy hh:mm:ss", valign = "top")
date_colidx <- grep("datetime", colnames(df))
addStyle(
wb,
sheet_name,
dateStyle,
rows = 1:nrow(df) + 1,
cols = date_colidx,
gridExpand = TRUE
)
setColWidths(wb, sheet_name, cols = 1:ncol(df), widths = "auto")
setColWidths(wb, sheet_name, cols = notes_colidx, widths = c(50, 40, 20))
setColWidths(wb, sheet_name, cols = date_colidx, widths = 18)
openXL(wb)
wb <- createWorkbook()
sheet_name <- "LPG_DB"
addWorksheet(wb, sheet_name)
writeDataTable(wb, sheet_name, df, tableStyle = "TableStyleMedium9")
baseStyle <- createStyle(valign = "top")
addStyle(
wb,
sheet_name,
baseStyle,
rows = 1:nrow(df) + 1,
cols = 1:ncol(df),
gridExpand = TRUE
)
wrapStyle <- createStyle(wrapText = TRUE, valign = "top")
notes_colidx <- grep("notes", colnames(df))
addStyle(
wb,
sheet_name,
wrapStyle,
rows = 1:nrow(df) + 1,
cols = notes_colidx,
gridExpand = TRUE
)
dateStyle <- createStyle(numFmt = "dd.mm.yyyy hh:mm:ss", valign = "top")
date_colidx <- grep("datetime", colnames(df))
addStyle(
wb,
sheet_name,
dateStyle,
rows = 1:nrow(df) + 1,
cols = date_colidx,
gridExpand = TRUE
)
setColWidths(wb, sheet_name, cols = 1:ncol(df), widths = "auto")
setColWidths(wb, sheet_name, cols = notes_colidx, widths = c(50, 40, 20))
setColWidths(wb, sheet_name, cols = date_colidx, widths = 17)
openXL(wb)
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
doc <- readr::read_file(file) %>%
read_xml()
# Eindeutige Datumszeit aus der kalten Raumtemperaturmessung beziehen
datetime <- xml_find_all(doc, ".//Raumtemperatur_kalt") %>%
xml_attr("Time") %>%
lubridate::dmy_hms(tz = "CET")
# Leuchtendaten extrahieren
df_luminaire <- xml_find_all(doc, ".//Leuchtendaten") %>%
xml_attrs() %>%
data.frame() %>%
t() %>%
data.frame() %>%
remove_rownames()
# Leuchtenfamilie extrahieren
product_family <- xml_find_all(doc, ".//Allgemein") %>%
xml_attr("Produktserie")
# Textblöcke Schutartprüfung, Bemerkungen, Verteiler extrahieren
notes_nodes <- xml_find_all(doc, ".//Weitere_Daten")
note_schutzart <- xml_attr(notes_nodes, "Schutzartpruefung") %>%
gsub("/;/", "\n", .)
note_bemerkung <- xml_attr(notes_nodes, "Bemerkungen") %>%
gsub("/;/", "\n", .)
note_verteiler <- xml_attr(notes_nodes, "Verteiler") %>%
gsub("/;/", "\n", .)
# Namespace der einzelnen Prüfschritte extrahieren
norm_desc <- xml_find_all(doc, ".//Pruefschritte") %>%
xml_children() %>%
xml_name()
# extracting codename of thermoelements
thermoelement <- xml_find_all(doc, ".//Thermoelemente") %>%
xml_children()
thermo_name <- xml_name(thermoelement)
code <- xml_attr(thermoelement, "Code") %>%
gsub(" ", "_", .) # Ersetzt Leerzeichen
# Mit den einzelnen Prüfschritte die einzelnen Messergebnisse extrahieren
df_lpm <- data.frame(description = character())
for (desc in norm_desc) {
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_dub <- data.frame(description, values) %>%
df_lpm <- data.frame(description, values) %>%
mutate(norm = str_replace(desc, "Norm", "U")) %>%
bind_rows(df_lpm, .)
}
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_dub <- data.frame(description, values) %>%
df_lpm <- data.frame(description, values) %>%
mutate(norm = str_replace(desc, "Norm", "U")) %>%
bind_rows(df_lpm, .)
df_dub <- data.frame(description, values)
View(df_dub)
df_dub <- data.frame(description, values) %>%
data.table::setnames(description, thermo_name)
description
grep("Termo", description)
grep("Thermo", description)
grepl("Thermo", description)
description(grepl("Thermo", description))
description[grepl("Thermo", description)]
df_dub <- data.frame(description, values) %>%
data.table::setnames(
description[grepl("Thermo", description)],
thermo_name
)
View(df_dub)
description[grepl("Thermo", description)]
test <- description[grepl("Thermo", description)]
View(df_dub)
description[-6]
description[1]
description[-4]
grep("Thermo", description)
description[grep("Thermo", description)] <- thermo_name
description
thermo_name
description[grep("Thermo", description)] <- code
description
# Leuchtendaten extrahieren
df_luminaire <- xml_find_all(doc, ".//Leuchtendaten") %>%
xml_attrs() %>%
data.frame() %>%
t() %>%
data.frame() %>%
remove_rownames()
# Leuchtenfamilie extrahieren
product_family <- xml_find_all(doc, ".//Allgemein") %>%
xml_attr("Produktserie")
# Textblöcke Schutartprüfung, Bemerkungen, Verteiler extrahieren
notes_nodes <- xml_find_all(doc, ".//Weitere_Daten")
note_schutzart <- xml_attr(notes_nodes, "Schutzartpruefung") %>%
gsub("/;/", "\n", .)
note_bemerkung <- xml_attr(notes_nodes, "Bemerkungen") %>%
gsub("/;/", "\n", .)
note_verteiler <- xml_attr(notes_nodes, "Verteiler") %>%
gsub("/;/", "\n", .)
# Namespace der einzelnen Prüfschritte extrahieren
norm_desc <- xml_find_all(doc, ".//Pruefschritte") %>%
xml_children() %>%
xml_name()
# extracting codename of thermoelements
thermoelement <- xml_find_all(doc, ".//Thermoelemente") %>%
xml_children()
thermo_name <- xml_name(thermoelement)
code <- xml_attr(thermoelement, "Code") %>%
gsub(" ", "_", .) # Ersetzt Leerzeichen
# Mit den einzelnen Prüfschritte die einzelnen Messergebnisse extrahieren
df_lpm <- data.frame(description = character())
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
description[grep("Thermo", description)] <- code # replace with code
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_dub <- data.frame(description, values) %>%
df_lpm <- data.frame(description, values) %>%
mutate(norm = str_replace(desc, "Norm", "U")) %>%
bind_rows(df_lpm, .)
df_dub <- data.frame(description, values)
View(df_dub)
distinct(df_dub, description)
distinct(df_dub, description, .keep_all = TRUE)
View(df_dub)
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(values)
View(df_dub)
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
description[grep("Thermo", description)] <- code # replace with code
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_dub <- data.frame(description, values) %>%
arrange(desc(values), .by_group = description)
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values))
# Leuchtendaten extrahieren
df_luminaire <- xml_find_all(doc, ".//Leuchtendaten") %>%
xml_attrs() %>%
data.frame() %>%
t() %>%
data.frame() %>%
remove_rownames()
# Leuchtenfamilie extrahieren
product_family <- xml_find_all(doc, ".//Allgemein") %>%
xml_attr("Produktserie")
# Textblöcke Schutartprüfung, Bemerkungen, Verteiler extrahieren
notes_nodes <- xml_find_all(doc, ".//Weitere_Daten")
note_schutzart <- xml_attr(notes_nodes, "Schutzartpruefung") %>%
gsub("/;/", "\n", .)
note_bemerkung <- xml_attr(notes_nodes, "Bemerkungen") %>%
gsub("/;/", "\n", .)
note_verteiler <- xml_attr(notes_nodes, "Verteiler") %>%
gsub("/;/", "\n", .)
# Namespace der einzelnen Prüfschritte extrahieren
norm_desc <- xml_find_all(doc, ".//Pruefschritte") %>%
xml_children() %>%
xml_name()
# extracting codename of thermoelements
thermoelement <- xml_find_all(doc, ".//Thermoelemente") %>%
xml_children()
thermo_name <- xml_name(thermoelement)
code <- xml_attr(thermoelement, "Code") %>%
gsub(" ", "_", .) %>% # Ersetzt Leerzeichen
paste0("T_", .)
# Mit den einzelnen Prüfschritte die einzelnen Messergebnisse extrahieren
df_lpm <- data.frame(description = character())
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
description[grep("Thermo", description)] <- code # replace with code
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>%
distinct()
View(df_dub)
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>%
ungroup() %>%
distinct()
View(df_dub)
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>%
#ungroup() %>%
distinct(description, .keep_all = TRUE)
View(df_dub)
unique(description)
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>%
#ungroup() %>%
distinct(description, .keep_all = TRUE) %>%
arrange(match(description, unique(description)))
View(df_dub)
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>%
#ungroup() %>%
distinct(description, .keep_all = TRUE) %>%
arrange(desc(match(description, unique(description))))
match(description, unique(description))
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>%
#ungroup() %>%
distinct(description, .keep_all = TRUE) %>%
arrange(match(description, desc_unique))
desc_unique <- match(description, unique(description))
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>%
#ungroup() %>%
distinct(description, .keep_all = TRUE) %>%
arrange(match(description, desc_unique))
match(description, desc_unique)
desc_unique <- unique(description)
df_dub <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>%
#ungroup() %>%
distinct(description, .keep_all = TRUE) %>%
arrange(match(description, desc_unique))
df_lpm <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = str_replace(desc, "Norm", "U")) %>%
bind_rows(df_lpm, .)
View(df_lpm)
# Mit den einzelnen Prüfschritte die einzelnen Messergebnisse extrahieren
df_lpm <- data.frame(description = character())
for (desc in norm_desc) {
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
description[grep("Thermo", description)] <- code # replace with code
desc_unique <- unique(description)
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_lpm <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = str_replace(desc, "Norm", "U")) %>%
bind_rows(df_lpm, .)
}
View(df_lpm)
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
View(df)
## Saving Excel database
wb <- createWorkbook()
sheet_name <- "LPG_DB"
addWorksheet(wb, sheet_name)
writeDataTable(wb, sheet_name, df, tableStyle = "TableStyleMedium9")
View(df)
colnames(Df)
colnames(df)
test <- df %>%
relocate()
View(test)
desc(colnames(df))
4
test <- df %>% select(order(colnames(df)))
colnames(test)
colnames(test)
View(df)
writeDataTable(wb, sheet_name, df, tableStyle = "TableStyleMedium9")
unique(tolower(colnames(test)))
colnames(test)
View(test)
test1 <- colnames(test)
test1 <- tolower(test1)
duplicated(test1)
test1[duplicated(test1)]
code
cbind(code, "U100_T_LED_tc")
rbind(code, "U100_T_LED_tc")
strcat(code, "U100_T_LED_tc")
code + "U100_T_LED_tc"
code[5] <- "U100_T_LED_tc"
code
gsub("LED_Tc", "Test", code)
