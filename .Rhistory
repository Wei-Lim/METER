unique(tolower(colnames(test)))
colnames(test)
View(test)
test1 <- colnames(test)
test1 <- tolower(test1)
duplicated(test1)
test1[duplicated(test1)]
code
cbind(code, "U100_T_LED_tc")
rbind(code, "U100_T_LED_tc")
strcat(code, "U100_T_LED_tc")
code + "U100_T_LED_tc"
code[5] <- "U100_T_LED_tc"
code
gsub("LED_Tc", "Test", code)
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
colnames(df)
unique(lowerto(colnames(df)))
unique(tolower(colnames(df)))
test <- unique(tolower(colnames(df)))
duplicated(test)
writeDataTable(wb, sheet_name, df, tableStyle = "TableStyleMedium9")
test <- unique(toupper(colnames(df)))
duplicated(test)
max(duplicated(test))
any(duplicated(tolower(colnames(df))))
duplicated(tolower(colnames(df)))
colnames(df)[duplicated(tolower(colnames(df)))]
colnames(df)
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
# Leuchtendaten extrahieren
df_luminaire <- xml_find_all(doc, ".//Leuchtendaten") %>%
xml_attrs() %>%
data.frame() %>%
t() %>%
data.frame() %>%
remove_rownames()
# Leuchtenfamilie extrahieren
product_family <- xml_find_all(doc, ".//Allgemein") %>%
xml_attr("Produktserie")
# Textblöcke Schutartprüfung, Bemerkungen, Verteiler extrahieren
notes_nodes <- xml_find_all(doc, ".//Weitere_Daten")
note_schutzart <- xml_attr(notes_nodes, "Schutzartpruefung") %>%
gsub("/;/", "\n", .)
note_bemerkung <- xml_attr(notes_nodes, "Bemerkungen") %>%
gsub("/;/", "\n", .)
note_verteiler <- xml_attr(notes_nodes, "Verteiler") %>%
gsub("/;/", "\n", .)
# Namespace der einzelnen Prüfschritte extrahieren
norm_desc <- xml_find_all(doc, ".//Pruefschritte") %>%
xml_children() %>%
xml_name()
norm_desc
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
df_lpm
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
df_lpm
mutate(df_lpm, norm = str_replace(desc, "Norm", "U"))
df_lpm
df_lpm <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = str_replace(norm, "Norm", "U")) %>%
mutate(norm = str_replace(norm, "Anorm", "AU")) %>%
bind_rows(df_lpm, .)
# Mit den einzelnen Prüfschritte die einzelnen Messergebnisse extrahieren
df_lpm <- data.frame(description = character())
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
description[grep("Thermo", description)] <- code # replace with code
desc_unique <- unique(description)
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_lpm <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = str_replace(norm, "Norm", "U")) %>%
mutate(norm = str_replace(norm, "Anorm", "AU")) %>%
bind_rows(df_lpm, .)
df_lpm
desc
desc
norm_desc
df_lpm <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique))
df_lpm
desc
data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = str_replace(desc, "Norm", "U"))
data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = str_replace(desc, "Norm", "U")) %>%
mutate(norm = str_replace(desc, "Anorm", "AU"))
for (desc in norm_desc) {
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
description[grep("Thermo", description)] <- code # replace with code
desc_unique <- unique(description)
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
df_lpm <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = str_replace(desc, "Norm", "U")) %>%
mutate(norm = str_replace(desc, "Anorm", "AU")) %>%
bind_rows(df_lpm, .)
}
df_lpm
View(df_lpm)
# Mit den einzelnen Prüfschritte die einzelnen Messergebnisse extrahieren
df_lpm <- data.frame(description = character())
for (desc in norm_desc) {
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
description[grep("Thermo", description)] <- code # replace with code
desc_unique <- unique(description)
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
desc <- gsub("Norm", "U", desc) %>%
gsub("Anorm", "AU", desc)
df_lpm <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = desc) %>%
bind_rows(df_lpm, .)
}
df_lpm
# Mit den einzelnen Prüfschritte die einzelnen Messergebnisse extrahieren
df_lpm <- data.frame(description = character())
for (desc in norm_desc) {
measurements <- paste0(".//", desc, "/Messergebnisse") %>%
xml_find_all(doc, .) %>%
xml_children() %>%
xml_children()
description <- xml_name(measurements)
description[grep("Thermo", description)] <- code # replace with code
desc_unique <- unique(description)
values <- xml_attr(measurements, "Value") %>%
gsub("\\.", "", .) %>%
gsub(",", ".", .) %>%
as.numeric()
desc <- gsub("Norm", "U", desc) %>%
gsub("Anorm", "AU", .)
df_lpm <- data.frame(description, values) %>%
group_by(description) %>%
arrange(desc(values)) %>% # only maximum temperature value
distinct(description, .keep_all = TRUE) %>% # removing duplicate codes
arrange(match(description, desc_unique)) %>%
mutate(norm = desc) %>%
bind_rows(df_lpm, .)
}
df_lpm
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
# reshape from long to wide
df <- df_lpm %>%
pivot_wider(names_from = c(norm, description), values_from = values) %>%
bind_rows(df) %>%
arrange(desc(datetime)) %>%
relocate(where(grepl('^U', colnames(df)) )) %>%
relocate(filepath, .after = last_col())
# reshape from long to wide
df <- df_lpm %>%
pivot_wider(names_from = c(norm, description), values_from = values) %>%
bind_rows(df) %>%
arrange(desc(datetime)) %>%
relocate(sort(names(.))) %>%
relocate(filepath, .after = last_col())
View(df)
# reshape from long to wide
df <- df_lpm %>%
pivot_wider(names_from = c(norm, description), values_from = values) %>%
bind_rows(df) %>%
arrange(desc(datetime)) %>%
relocate(sort(names(.))) %>%
relocate(
datetime,
family,
luminare,
mounting,
SK,
IP,
notes1,
notes2,
notes3
) %>%
relocate(filepath, .after = last_col())
# reshape from long to wide
df <- df_lpm %>%
pivot_wider(names_from = c(norm, description), values_from = values) %>%
bind_rows(df) %>%
arrange(desc(datetime)) %>%
relocate(sort(names(.))) %>%
relocate(
datetime,
family,
luminaire,
mounting,
SK,
IP,
notes1,
notes2,
notes3
) %>%
relocate(filepath, .after = last_col())
df
View(df)
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
source('H:/Projekte/Python/METER/extract_lpm_data.R', encoding = 'UTF-8')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openxlsx)
library(ggplot2)
df <- readWorkbook("LPG_Temperatur_DB.xlsx", 1) %>%
mutate(datetime = convertToDateTime(datetime))
df <- readWorkbook("LPG_Temperatur_DB.xlsx", 1) %>%
mutate(datetime = convertToDateTime(datetime))
db <- readWorkbook("LPG_Temperatur_DB.xlsx", 1) %>%
mutate(datetime = convertToDateTime(datetime))
df <- db %>%
mutate(year = year(datetime))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(lubridate)
df <- db %>%
mutate(year = year(datetime))
df$year
df <- db %>%
mutate(year = year(datetime), month = month(datetime))
?count
df <- db %>%
mutate(year = year(datetime), month = month(datetime)) %>%
count(year)
df <- db %>%
mutate(year = year(datetime), month = month(datetime))
df %>%
count(year)
df <- db %>%
mutate(year = year(datetime), month = month(datetime))
df %>%
count(year)
df
df %>%
count(year)
db <- readWorkbook("LPG_Temperatur_DB.xlsx", 1) %>%
mutate(datetime = convertToDateTime(datetime))
db <- readWorkbook("LPG_Temperatur_DB.xlsx", 1) %>%
mutate(datetime = convertToDateTime(datetime))
# Datenvorverarbeitung
```{r}
df <- db %>%
mutate(year = year(datetime), month = month(datetime))
df %>%
count(year)
count(df, year)
df %>%
count(year) %>%
ggplot(year, n) +
geom_bar()
df %>%
count(year) %>%
ggplot(aes(year, n)) +
geom_bar()
df %>%
count(year)
test <- df %>%
count(year)
df %>%
count(year) %>%
ggplot(aes(year, n)) +
geom_bar()
df %>%
count(year) %>%
ggplot(., aes(year, n)) +
geom_bar()
df %>%
count(year) %>%
ggplot(., aes(factor(year), n)) +
geom_bar()
df %>%
count(year) %>%
ggplot(., aes(x = year, y = n)) +
geom_bar(stat = 'identity')
df %>%
count(year) %>%
ggplot(., aes(x = year, y = n, color = month)) +
geom_bar(stat = 'identity')
df %>%
group_by(year) %>%
count(month)
df %>%
group_by(year) %>%
count(month) %>%
ggplot(., aes(x = month, y = n, color = year)) +
geom_bar(stat = 'identity')
df %>%
group_by(year) %>%
count(month) %>%
ggplot(., aes(x = month, y = n, color = factor(year))) +
geom_bar(stat = 'identity')
df %>%
group_by(year) %>%
count(month) %>%
ggplot(., aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(stat = 'identity')
df %>%
count(year) %>%
ggplot(., aes(x = year, y = n)) +
geom_bar(stat = 'identity')
df %>%
group_by(year) %>%
count(month) %>%
ggplot(., aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(aes(fill = year), stat = 'identity')
df %>%
group_by(year) %>%
count(month) %>%
ggplot(., aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(aes(fill = factor(year)), stat = 'identity')
df %>%
group_by(month) %>%
count(year) %>%
ggplot(., aes(x = factor(year), y = n, color = factor(month))) +
geom_bar(aes(fill = factor(month)), stat = 'identity')
df %>%
count(year) %>%
ggplot(., aes(x = factor(year), y = n)) +
geom_bar(stat = 'identity')
df %>%
count(year) %>%
ggplot(., aes(x = factor(year), y = n)) +
geom_bar(stat = 'identity') +
labs(
x = "Jahr",
y = "Anzahl Messungen"
)
df %>%
count(year) %>%
ggplot(aes(x = factor(year), y = n)) +
geom_bar(stat = 'identity') +
labs(
x = "Jahr",
y = "Anzahl Messungen"
)
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(aes(fill = factor(year)), stat = 'identity')
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(aes(fill = factor(year)), stat = 'identity')
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(aes(fill = factor(year)), stat = 'identity', position = position_dodge())
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(aes(fill = factor(year)), stat = 'identity', position = position_dodge2())
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(
aes(fill = factor(year)),
stat = 'identity',
position = position_dodge()
) +
geom_text(aes(label = n))
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(
aes(fill = factor(year)),
stat = 'identity'
)
count(df, month)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(lubridate)
db <- readWorkbook("LPG_Temperatur_DB.xlsx", 1) %>%
mutate(datetime = convertToDateTime(datetime))
df <- db %>%
mutate(year = year(datetime), month = month(datetime))
df %>%
count(year) %>%
ggplot(aes(x = factor(year), y = n)) +
geom_bar(stat = 'identity') +
labs(
x = "Jahr",
y = "Anzahl Messungen"
)
count(df, month)
count(df, month)
print(count(df, month))
count(df, month())
count(df, month)
test <- count(df, month)
View(test)
print(count(df, month))
print(test)
test <- count(df, month)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(lubridate)
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(
aes(fill = factor(year)),
stat = 'identity',
position = position_dodge()
) +
labs(
x = Monat,
y = Anzahl
)
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(
aes(fill = factor(year)),
stat = 'identity',
position = position_dodge()
) +
labs(
x = "Monat",
y = "Anzahl"
)
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(
aes(fill = factor(year)),
stat = 'identity',
position = position_dodge()
) +
labs(
x = "Monat",
y = "Anzahl",
color = "Jahr"
)
df %>%
group_by(year) %>%
count(month) %>%
ggplot(aes(x = factor(month), y = n, color = factor(year))) +
geom_bar(
aes(fill = factor(year)),
stat = 'identity',
position = position_dodge()
) +
labs(
x = "Monat",
y = "Anzahl",
color = "Jahr",
fill = "Jahr"
)
